[config]
default_to_workspace = false

[tasks.build_ios_sim]
script = '''
set -eux
cargo bundle --target aarch64-apple-ios-sim --features mobile  --format ios
cp assets/Info.plist target/aarch64-apple-ios-sim/debug/bundle/ios/Wallet.app/Info.plist
'''


[tasks.build_ios_device]
command = "cargo"
args = ["bundle","--release", "--target", "aarch64-apple-ios", "--features", "mobile"]

[tasks.build_macos]
args = ["bundle","--release", "--target", "aarch64-apple-darwin", "--features", "desktop"]
command = "cargo"

[tasks.run_macos]
script = '''
cargo run --package Wallet --bin Wallet  --features desktop
'''



[tasks.install_ios_sim]
command = "xcrun"
args = [
  "simctl",
  "install",
  "booted",
  "target/aarch64-apple-ios-sim/debug/bundle/ios/Wallet.app",
]

[tasks.run_ios_sim]
args = ["simctl", "launch", "--console", "booted", "com.zhouzhipeng.wallet"]
command = "xcrun"
dependencies = ["build_ios_sim", "install_ios_sim"]

[tasks.serve-sim]
dependencies = ["build_ios_sim", "install_ios_sim", "run_ios_sim"]



[tasks.code-sign-ios-device]
script = '''
# get the mobile provisioning profile
export APP_DEV_NAME=$(xcrun security find-identity -v -p codesigning | grep "Apple Development: " | sed -E 's/.*"([^"]+)".*/\1/')

# Find the provisioning profile from ~/Library/MobileDevice/Provisioning\ Profiles
export PROVISION_FILE=$(ls ~/Library/MobileDevice/Provisioning\ Profiles | grep mobileprovision)

# Convert the provisioning profile to json so we can use jq to extract the important bits
security cms -D \
	-i ~/Library/MobileDevice/Provisioning\ Profiles/${PROVISION_FILE} | \
	python3 -c 'import plistlib,sys,json; print(json.dumps(plistlib.loads(sys.stdin.read().encode("utf-8")), default=lambda o:"<not serializable>"))' \
	> target/provisioning.json

# jq out the important bits of the provisioning profile
export TEAM_IDENTIFIER=$(jq -r '.TeamIdentifier[0]' target/provisioning.json)
export APPLICATION_IDENTIFIER_PREFIX=$(jq -r '.ApplicationIdentifierPrefix[0]' target/provisioning.json)
export APPLICATION_IDENTIFIER=$(jq -r '.Entitlements."application-identifier"' target/provisioning.json)
export APP_ID_ACCESS_GROUP=$(jq -r '.Entitlements."keychain-access-groups"[0]' target/provisioning.json)

# now build the entitlements file
cat <<EOF > target/entitlements.xcent
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
		<key>application-identifier</key>
		<string>${APPLICATION_IDENTIFIER}</string>
		<key>keychain-access-groups</key>
		<array>
			<string>${APP_ID_ACCESS_GROUP}.*</string>
		</array>
		<key>get-task-allow</key>
		<true/>
		<key>com.apple.developer.team-identifier</key>
		<string>${TEAM_IDENTIFIER}</string>
</dict></plist>
EOF

# sign the app
codesign --force \
	--entitlements target/entitlements.xcent \
	--sign "${APP_DEV_NAME}" \
	target/aarch64-apple-ios/debug/bundle/ios/DioxusApp.app


'''

# god bless the crypto bros <3
# https://github.com/status-im/status-mobile/blob/6a5e718cd389f61d3708c4372856609afb40d11f/scripts/run-ios-device.sh#L6
[tasks.run-ios-device]
script = '''

APP_PATH="target/aarch64-apple-ios/debug/bundle/ios/DioxusApp.app"

# get the device id by jq-ing the json of the device list
xcrun devicectl list devices --json-output target/deviceid.json
DEVICE_UUID=$(jq -r '.result.devices[0].identifier' target/deviceid.json)

xcrun devicectl device install app --device "${DEVICE_UUID}" "${APP_PATH}" --json-output target/xcrun.json

# get the installation url by jq-ing the json of the device install
INSTALLATION_URL=$(jq -r '.result.installedApplications[0].installationURL' target/xcrun.json)

# launch the app
# todo: we can just background it immediately and then pick it up for loading its logs
xcrun devicectl device process launch --device "${DEVICE_UUID}" "${INSTALLATION_URL}"

# # launch the app and put it in background
# xcrun devicectl device process launch --no-activate --verbose --device "${DEVICE_UUID}" "${INSTALLATION_URL}" --json-output "${XCRUN_DEVICE_PROCESS_LAUNCH_LOG_DIR}"

# # Extract background PID of status app
# STATUS_PID=$(jq -r '.result.process.processIdentifier' "${XCRUN_DEVICE_PROCESS_LAUNCH_LOG_DIR}")
# "${GIT_ROOT}/scripts/wait-for-metro-port.sh"  2>&1

# # now that metro is ready, resume the app from background
# xcrun devicectl device process resume --device "${DEVICE_UUID}" --pid "${STATUS_PID}" > "${XCRUN_DEVICE_PROCESS_RESUME_LOG_DIR}" 2>&1







'''

[tasks.serve-device]
dependencies = [
  "build_ios_device",
  "code-sign-ios-device",
  "run-ios-device",
]


[tasks.build_ipa]
dependencies = [
  "build_ios_device",
]
script = '''
set -eux

cp -r target/aarch64-apple-ios/release/bundle/ios target/Payload
cd target
zip -r wallet.ipa Payload
rm -rf ../Payload
echo "generate ipa at :$(pwd)/wallet.ipa"
'''

[tasks.serve]
dependencies = [
  "run_ios_sim",
]


[tasks.build_wasm]
script = '''

set -eux

#brew install llvm
export PATH="/opt/homebrew/opt/llvm/bin:$PATH" &&  export LDFLAGS="-L/opt/homebrew/opt/llvm/lib" && export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

rm -rf dist
dx build --release --features web



'''

[tasks.upload_wasm]
dependencies = [
  "build_wasm",
]
script = '''

set -eux

cp -r dist wallet
rm -rf wallet/*.br
rm -rf wallet/assets/*.br

zip -r wallet.zip wallet

rm -rf wallet

mv wallet.zip dist/


curl 'https://zhouzhipeng.com/files/upload?unzip=true' \
  -H "$AUTH_KEY" \
  -F "file=@dist/wallet.zip"

'''

[tasks.dev_server]
script= '''
#brew install llvm
export PATH="/opt/homebrew/opt/llvm/bin:$PATH" &&  export LDFLAGS="-L/opt/homebrew/opt/llvm/lib" && export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"

dx serve --hot-reload --features web --platform web
'''


